// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: carrental.proto

package carrental

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarRentalServiceClient is the client API for CarRentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarRentalServiceClient interface {
	ListCarAvailability(ctx context.Context, in *ListCarAvailabilityRequest, opts ...grpc.CallOption) (*ListCarAvailabilityResponse, error)
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	ReserveCar(ctx context.Context, in *ReserveCarRequest, opts ...grpc.CallOption) (*Car, error)
}

type carRentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarRentalServiceClient(cc grpc.ClientConnInterface) CarRentalServiceClient {
	return &carRentalServiceClient{cc}
}

func (c *carRentalServiceClient) ListCarAvailability(ctx context.Context, in *ListCarAvailabilityRequest, opts ...grpc.CallOption) (*ListCarAvailabilityResponse, error) {
	out := new(ListCarAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/carrental.CarRentalService/ListCarAvailability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServiceClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, "/carrental.CarRentalService/GetQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRentalServiceClient) ReserveCar(ctx context.Context, in *ReserveCarRequest, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/carrental.CarRentalService/ReserveCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarRentalServiceServer is the server API for CarRentalService service.
// All implementations must embed UnimplementedCarRentalServiceServer
// for forward compatibility
type CarRentalServiceServer interface {
	ListCarAvailability(context.Context, *ListCarAvailabilityRequest) (*ListCarAvailabilityResponse, error)
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	ReserveCar(context.Context, *ReserveCarRequest) (*Car, error)
	mustEmbedUnimplementedCarRentalServiceServer()
}

// UnimplementedCarRentalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarRentalServiceServer struct {
}

func (UnimplementedCarRentalServiceServer) ListCarAvailability(context.Context, *ListCarAvailabilityRequest) (*ListCarAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCarAvailability not implemented")
}
func (UnimplementedCarRentalServiceServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedCarRentalServiceServer) ReserveCar(context.Context, *ReserveCarRequest) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveCar not implemented")
}
func (UnimplementedCarRentalServiceServer) mustEmbedUnimplementedCarRentalServiceServer() {}

// UnsafeCarRentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarRentalServiceServer will
// result in compilation errors.
type UnsafeCarRentalServiceServer interface {
	mustEmbedUnimplementedCarRentalServiceServer()
}

func RegisterCarRentalServiceServer(s grpc.ServiceRegistrar, srv CarRentalServiceServer) {
	s.RegisterService(&CarRentalService_ServiceDesc, srv)
}

func _CarRentalService_ListCarAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServiceServer).ListCarAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrental.CarRentalService/ListCarAvailability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServiceServer).ListCarAvailability(ctx, req.(*ListCarAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalService_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServiceServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrental.CarRentalService/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServiceServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRentalService_ReserveCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRentalServiceServer).ReserveCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carrental.CarRentalService/ReserveCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRentalServiceServer).ReserveCar(ctx, req.(*ReserveCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarRentalService_ServiceDesc is the grpc.ServiceDesc for CarRentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarRentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carrental.CarRentalService",
	HandlerType: (*CarRentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCarAvailability",
			Handler:    _CarRentalService_ListCarAvailability_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _CarRentalService_GetQuote_Handler,
		},
		{
			MethodName: "ReserveCar",
			Handler:    _CarRentalService_ReserveCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carrental.proto",
}
